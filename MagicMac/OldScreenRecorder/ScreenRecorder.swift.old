//
//  ScreenRecorder.swift
//  MagicMac
//
//  Created by Tom Grushka on 4/19/24.
//

import AVFAudio
import AVFoundation
import ScreenCaptureKit
import UserNotifications

class ScreenRecorder: NSObject, SCStreamDelegate, SCStreamOutput {
    var assetWriter: AVAssetWriter?
    var videoInput: AVAssetWriterInput?
    var audioInput: AVAssetWriterInput?
//    var micInput: AVAssetWriterInput
    let audioEngine = AVAudioEngine()
    var startTime: Date?
    var stream: SCStream?
    var filePath: String!
//    var audioFile: AVAudioFile?
    var audioSettings: [String: Any]!
    var availableContent: SCShareableContent?
    var filter: SCContentFilter?
    var updateTimer: Timer?
    var recordMic = false

    var screen: SCDisplay?
    var window: SCWindow?
    var streamType: StreamType?
    let saveDirectory: String

    let excludedWindows = ["", "com.apple.dock", "com.apple.controlcenter", "com.apple.notificationcenterui", "com.apple.systemuiserver", "com.apple.WindowManager"]
    
    override init() {
        lazy var userDesktop = (NSSearchPathForDirectoriesInDomains(.desktopDirectory, .userDomainMask, true) as [String]).first!

        // the `com.apple.screencapture` domain has the user set path for where they want to store screenshots or videos
        saveDirectory = (UserDefaults(suiteName: "com.apple.screencapture")?.string(forKey: "location") ?? userDesktop)
    }
    
//
//    func applicationDidFinishLaunching(_: Notification) {
//        lazy var userDesktop = (NSSearchPathForDirectoriesInDomains(.desktopDirectory, .userDomainMask, true) as [String]).first!
//
//        Task {
//            await updateAvailableContent()
//        }
//
//        UNUserNotificationCenter.current().requestAuthorization(options: [.alert, .sound, .badge]) { _, error in
//            if let error = error { print("Notification authorization denied: \(error.localizedDescription)") }
//        }
//
//        NotificationCenter.default.addObserver(
//            // update the content & menu when a display device has changed
//            forName: NSApplication.didChangeScreenParametersNotification,
//            object: NSApplication.shared,
//            queue: OperationQueue.main
//        ) { [self] _ in
//            Task {
//                await updateAvailableContent()
//            }
//        }
//    }

    func updateAvailableContent() async {
        await withCheckedContinuation { continuation in
            SCShareableContent.getExcludingDesktopWindows(true, onScreenWindowsOnly: true) { content, error in
                if let error = error {
                    switch error {
                    case SCStreamError.userDeclined: self.requestPermissions()
                    default: print("[err] failed to fetch available content:".local, error.localizedDescription)
                    }
                    continuation.resume()
                    return
                }
                self.availableContent = content
                assert(self.availableContent?.displays.isEmpty != nil, "There needs to be at least one display connected".local)
                continuation.resume()
            }
        }
    }

    func requestPermissions() {
        DispatchQueue.main.async {
            let alert = NSAlert()
            alert.messageText = "MagicMac needs permissions!".local
            alert.informativeText = "MagicMac needs screen recording permissions.".local
            alert.addButton(withTitle: "Open Settings".local)
            alert.alertStyle = .informational
            if alert.runModal() == .alertFirstButtonReturn {
                NSWorkspace.shared.open(URL(string: "x-apple.systempreferences:com.apple.preference.security?Privacy_ScreenCapture")!)
            }
        }
    }

//    func applicationWillTerminate(_: Notification) {
//        if stream != nil {
//            stopRecording()
//        }
//    }
//
//    func applicationSupportsSecureRestorableState(_: NSApplication) -> Bool {
//        return true
//    }
}

extension String {
    var local: String { return NSLocalizedString(self, comment: "") }
}
